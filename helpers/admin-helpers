var db=require('../config/connection')
var collection=require('../config/collections')
const bcrypt=require('bcrypt')
const { ADMIN_COLLECTION } = require('../config/collections')
const { response } = require('../app')
var ObjectId = require('mongodb').ObjectId
const { resolve } = require('path')
const jwt = require('jsonwebtoken');
require('dotenv').config();
const JWT_SECRET_KEY = process.env.JWT_SECRET_KEY;



module.exports={

    doSign_up:(adminData)=>{
        return new Promise(async(resolve, reject)=>{
            adminData.Password=await bcrypt.hash(adminData.Password, 10)
        db.get().collection(collection.ADMIN_COLLECTION).insertOne(adminData).then((data)=>{
            resolve(adminData)
        })
            
        }) 

    },

    doLog_in:(adminData)=>{
        return new Promise(async(resolve, reject)=>{
           
            let admin=await db.get().collection(collection.ADMIN_COLLECTION).findOne({Email:adminData.Email})
            if(admin){
                bcrypt.compare(adminData.Password, admin.Password).then((status)=>{
                    
                    if(status){
                        const token = jwt.sign({ userId:admin._id,Email:adminData.Email,Name:admin.Name }, JWT_SECRET_KEY, { expiresIn: '2h' });
                        console.log("Login Success");
                        resolve({ status: true, token });   
                        
                      } else { 
                         console.log("Login Failed");    
                         resolve({ status: false });
                      }
     
                })

            }else{
                console.log("Login failed")
                resolve({status:false})
            }
        })
    },

    verifiedStatus:(proId)=>{
        return new Promise(async(resolve,reject)=>{
            db.get().collection(collection.PROFILE_COLLECTION).updateOne({_id:new ObjectId(proId)},
            {
                $set:{
                    status:'Verified'
                }
            }).then(()=>{
                resolve({status:true})
            })
        })
    }
}